rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUserTag(tag) {
      return tag.matches('^[a-zA-Z0-9_]{3,30}$');
    }
    
    // User collection rules
    match /users/{userId} {
      // Allow users to read and write their own data
      allow read: if isAuthenticated();
      allow create: if isUserAuthenticated(userId);
      allow update: if isUserAuthenticated(userId) && 
                     (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid']));
      allow delete: if isUserAuthenticated(userId);
    }
    
    // UserTags collection rules
    match /userTags/{tag} {
      // Anyone can read a user tag to check availability or look up a user
      allow read: if true;
      
      // Only the authenticated user can create/update/delete their own tag
      // Add validation to ensure the user doesn't already have a tag
      allow create: if isAuthenticated() && 
                     request.resource.data.uid == request.auth.uid &&
                     isValidUserTag(tag) &&
                     // Check that there's no document in userTags collection with this UID
                     !existsAfter(/databases/$(database)/documents/userTags/$(request.auth.uid));
                     
      allow update: if isAuthenticated() && 
                     resource.data.uid == request.auth.uid &&
                     request.resource.data.uid == request.auth.uid;
                     
      allow delete: if isAuthenticated() && 
                     resource.data.uid == request.auth.uid;
    }
    
    // Nota collection rules
    match /notas/{notaId} {
      // Allow users to read and write their own notas
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Published notas rules
    match /publishedNotas/{notaId} {
      // Anyone can read published notas
      allow read: if true;
      
      // Only the author can create/update/delete their published nota
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Full update for author
        resource.data.authorId == request.auth.uid ||
        // Limited update for statistics and votes
        (
          // For safety, restrict which fields can be updated by non-authors
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['viewCount', 'uniqueViewers', 'lastViewedAt', 'referrers', 'stats', 'likeCount', 'dislikeCount', 'votes', 'commentCount']) &&
          // User can only update their own vote in the votes map
          (
            !request.resource.data.diff(resource.data).affectedKeys().hasAny(['votes']) || 
            (resource.data.votes == null && 
             ('votes' in request.resource.data) && 
             request.resource.data.votes.keys().hasOnly([request.auth.uid])) ||
            (resource.data.votes != null && 
             request.resource.data.votes.diff(resource.data.votes).affectedKeys().hasOnly([request.auth.uid]))
          )
        )
      );
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }
    
    // Published nota viewers tracking
    match /publishedNotaViewers/{notaId} {
      // Only authors can read viewer data (for privacy)
      allow read: if isAuthenticated() && 
                   exists(/databases/$(database)/documents/publishedNotas/$(notaId)) &&
                   get(/databases/$(database)/documents/publishedNotas/$(notaId)).data.authorId == request.auth.uid;
      
      // Any authenticated user can create or update viewer data (for tracking views)
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                     // Only allow adding the current user to the viewers array
                     (request.resource.data.viewers.hasAll(resource.data.viewers) &&
                      request.resource.data.viewers.size() <= resource.data.viewers.size() + 1);
    }
    
    // Nota votes collection rules
    match /notaVotes/{voteId} {
      // The vote ID format must be notaId_userId
      function isValidVoteId() {
        let parts = voteId.split('_');
        return parts.size() == 2 && parts[1] == request.auth.uid;
      }
      
      // Any authenticated user can read votes (to check their own vote status)
      allow read: if isAuthenticated();
      
      // Only the authenticated user can create/update their own vote
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid &&
                     isValidVoteId() &&
                     // Validate vote type
                     (request.resource.data.voteType == 'like' || request.resource.data.voteType == 'dislike');
                     
      allow update: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid &&
                     request.resource.data.userId == request.auth.uid &&
                     // Validate vote type
                     (request.resource.data.voteType == 'like' || request.resource.data.voteType == 'dislike') &&
                     // Can't change the nota ID
                     request.resource.data.notaId == resource.data.notaId;
                     
      allow delete: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
    }
    
    // Comments collection rules
    match /comments/{commentId} {
      // Anyone can read comments on published notas
      allow read: if true;
      
      // Only authenticated users can create comments
      allow create: if isAuthenticated() && 
                    request.resource.data.authorId == request.auth.uid &&
                    exists(/databases/$(database)/documents/publishedNotas/$(request.resource.data.notaId));
      
      // Update rules: authors can update their own comments
      allow update: if isAuthenticated() && (
        // Option 1: comment author can update their own comment content
        (resource.data.authorId == request.auth.uid &&
         request.resource.data.authorId == request.auth.uid &&
         request.resource.data.notaId == resource.data.notaId) ||
        
        // Option 2: any authenticated user can update the votes and counts
        (request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['votes', 'likeCount', 'dislikeCount', 'replyCount']) &&
         // User can only update their own vote in the votes map
         (
           !request.resource.data.diff(resource.data).affectedKeys().hasAny(['votes']) ||
           (resource.data.votes == null && 
            ('votes' in request.resource.data) && 
            request.resource.data.votes.keys().hasOnly([request.auth.uid])) ||
           (resource.data.votes != null && 
            request.resource.data.votes.diff(resource.data.votes).affectedKeys().hasOnly([request.auth.uid]))
         ))
      );
      
      // Delete rules: comment author or nota author can delete comments
      allow delete: if isAuthenticated() && (
        // Comment author can delete their own comment
        resource.data.authorId == request.auth.uid ||
        // Nota author can delete any comment on their nota
        (exists(/databases/$(database)/documents/publishedNotas/$(resource.data.notaId)) &&
         get(/databases/$(database)/documents/publishedNotas/$(resource.data.notaId)).data.authorId == request.auth.uid)
      );
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}